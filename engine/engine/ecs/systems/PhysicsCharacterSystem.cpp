#include "PhysicsCharacterSystem.h"

namespace Carrot::ECS {
    PhysicsCharacterSystem::PhysicsCharacterSystem(Carrot::ECS::World& world)
            : Carrot::ECS::LogicSystem<Carrot::ECS::TransformComponent, Carrot::ECS::PhysicsCharacterComponent>(world) {
    }

    void PhysicsCharacterSystem::tick(double dt) {
        forEachEntity([&](Carrot::ECS::Entity& entity, Carrot::ECS::TransformComponent& transformComp, Carrot::ECS::PhysicsCharacterComponent& characterComp) {
            if(firstFrame) {
                characterComp.character.setWorldTransform(transformComp.computeGlobalPhysicsTransform());
                characterComp.character.update(dt);
                firstFrame = false;
            } else {
                characterComp.character.update(dt);
                transformComp.setGlobalTransform(characterComp.character.getWorldTransform());
            }
        });
    }

    void PhysicsCharacterSystem::onFrame(Carrot::Render::Context renderContext) {
        // TODO: autogenerated
    }

    std::unique_ptr <Carrot::ECS::System> PhysicsCharacterSystem::duplicate(Carrot::ECS::World& newWorld) const {
        std::unique_ptr<PhysicsCharacterSystem> result = std::make_unique<PhysicsCharacterSystem>(newWorld);
        return result;
    }

    void PhysicsCharacterSystem::reload() {
        firstFrame = true;
        forEachEntity([&](Carrot::ECS::Entity& entity, Carrot::ECS::TransformComponent& transformComp, Carrot::ECS::PhysicsCharacterComponent& characterComp) {
            characterComp.character.addToWorld();
        });
    }

    void PhysicsCharacterSystem::unload() {
        forEachEntity([&](Carrot::ECS::Entity& entity, Carrot::ECS::TransformComponent& transformComp, Carrot::ECS::PhysicsCharacterComponent& characterComp) {
            characterComp.character.removeFromWorld();
        });
    }
}